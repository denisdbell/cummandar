#!/bin/bash
############################################################
#####:: Author: Denis Bell <denisdbell@gmail.com>       ####
#####:: simple bash program to execute stored commands. ####
############################################################

#file containing commands
command_file=$1

#function: This can be either "a" for add a command b
#or "v" for viewing the commands in vim
function=$2

#colours used for highlighting text
yellow='\033[0;93m'
red='\033[0;101m'
nc='\033[0m' # no color

#arrow up code
arrow_up='\[A'

#arrow down code
arrow_down='\[B'

#enter button code 
enter=""

success=0

#line counter
line_counter=1

#currenly selected line number
selected_line=1

#selected command
selected_command=""

#minimum line number
minimum_line_number=1

#maximum line number`
max_line_number="$(cat "$command_file" | wc -l)"

#This will display the main view which shows all the stored commands.
#It allows the user to navigate and execute a stored command
main_view () {

  while true
    do
	
    #check if character code detected.
    echo -n "$key" | grep "$arrow_up" 
	
    if [ "$?" -eq "$success" ]
    then
      selected_line=$(($selected_line - 1))
    fi
		
    #check if character code detected.	
    echo -n "$key" | grep "$arrow_down"

    if [ "$?" -eq "$success" ]
    then	
      selected_line=$(($selected_line + 1))		
    fi
		
    #if enter key is pressed
    if [[ "$key" = "" ]]
    then
      clear	
      bash -c "$selected_command"
    fi
	
    line_counter=1

    if [ "$selected_line" -ge "$max_line_number" ]
    then
      selected_line="$max_line_number"
    elif [ "$selected_line" -lt "$minimum_line_number" ]
    then		
      selected_line="$minimum_line_number"	
    fi	
    
    clear
	
    printf "${yellow}***************************************\n"	
    printf "******* A Total of %d Commands ********\n" "$max_line_number" 
    printf "***************************************${nc}\n\n"
    	
    while IFS='' read -r line || [[ -n "$line" ]]; do
		
      if [ "$line_counter" -eq "$selected_line" ]
      then
	printf "${red}%d::%s\n${nc}" \
	"$line_counter" "$line"					
	selected_command="$line"
      else	
	printf "${yellow}%d${nc}::%s\n" "$line_counter" "$line"
     fi
	    	
    line_counter=$(($line_counter + 1))
	
    done < "$command_file"
    
    printf "\n${yellow}**********************************************\n"
    printf "** Press [Up] and [Down] arrows to navigate **\n"
    printf "** Press the [Enter] key to run a command   **"
    printf "\n**********************************************${nc}"
    read -n3 key

  done
}


#check if file exists
if [ ! -f "$command_file" ]
then
  printf "the file \"%s\" does not exist" $command_file

  exit 1
fi

#TODO(denisdbell) - Covert below if statements to switch/case

#Add command to file
if [[ "$function" = "a"  ]] && [ ! -z "$3" ] 
then
  echo "$3" >> "$command_file"
  main_view
fi

#Open in command file in vim for editing
if [[ "$function" = "v" ]]
then
  vim "$command_file"		
fi

#Show main view if no values is passed for function
if [[ -z  "$function" ]]
then 
  main_view
fi	
